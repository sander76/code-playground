"""A pytest plugin for creating stubs of external calls made by coral-data.

Run your test once against real external calls and any subsequent call uses the generated stubs.
This can speed up the test-runs dramatically and also allows running tests on machines which are not able to access
these external services in any way.

To enable stubbing of external calls decorate your test function with a pytest marker:

.. code-block:: python

    @pytest.mark.coral_data_stub
    def test_my_function():
        # perform a test which depends on external data.
        pass

Stubs are stored inside a `coral_data_stubs` folder relative to the python test-file being run.

Example the following test folder structure:

::

    project_root
    └── tests
        └── test_something.py
            └── def test_something_success()


After running `test_something_success` your folder structure looks like: ::

    project_root
    └── tests
        ├── test_something.py
        │   └── def test_something_success()
        │
        └── coral_data_stubs
            └── test_something
                └── test_something_success
                    ├── stub_file_1
                    └── stub_file_2

"""
# This plugin makes use of the `create_or_cache` functionality used inside coral-data.
# It uses its output, stores it in a location inside this repo (which are then checked in) and changes the ttl of the
# cache so it doesn't expire.
# On a first test run, coral-data will call the external services and store the cached files
# in a folder "coral_data_stubs" relative to the test file.
# On a next test run these cache files will be used instead of calling the external services again.

from pathlib import Path
from typing import Any, Final

import pytest
from _pytest.fixtures import SubRequest
from coral_data.plexos.plexos_folder_processor import _PlexosFolderProcessor
from coral_data.utils import local_cache

_MARKER_NAME: Final[str] = "coral_data_stub"
_CACHE_TTL = 5 * 365 * 24 * 3600


def pytest_configure(config: pytest.Config) -> None:
    config.addinivalue_line("markers", f"{_MARKER_NAME}: Mark the test as stubbing external calls.")


def _get_stub_folder_name(test_class: Any, test_name: str) -> str:
    """Generate a stub folder name based on the test name generated by pytest."""
    if test_class:
        cassette_name = "{}.{}".format(test_class.__name__, test_name)
    else:
        cassette_name = test_name
    # The cassette name should not contain characters that are forbidden in a file name
    # In this case there is a possibility to have a collision if there will be names with different
    # forbidden chars but the same resulting string.
    # Possible solution is to add a hash to the resulting name, but this probability is too low to have such fix.
    for ch in r"<>?%*:|\"'/\\":
        cassette_name = cassette_name.replace(ch, "-")
    return cassette_name


@pytest.fixture
def coral_data_stub_markers(request: SubRequest) -> list[pytest.Mark]:
    return list(request.node.iter_markers(name=_MARKER_NAME))


def model_year_file_wrapper(org_method):
    """Wrapper function to monkeypatch the original _PlexosFolderProcessor._model_year_file call.

    It wraps the original with caching functionality.
    """

    def _wrapper(*args, **kwargs):
        self: _PlexosFolderProcessor = args[0]

        def as_string_dict() -> dict[int, str]:
            res = org_method(*args, **kwargs)
            return {year: str(pth) for year, pth in res.items()}

        result = {
            year: Path(pth)
            for year, pth in local_cache.create_or_cache(
                "model_year_file", (self._plexos_folder_type, self._scenario_pattern), as_string_dict
            ).items()
        }
        return result

    return _wrapper


@pytest.fixture(autouse=True)
def coral_data_stub(request: SubRequest, coral_data_stub_markers: list[pytest.Mark], monkeypatch: pytest.MonkeyPatch):
    """Create a where our stubs live.

    By default stubs live inside a `coral_data_stubs` folder on the same level as the test file
    is located.

    ```
    project_root
    └── tests
        └── test_something.py
            └── def test_something_success()

    results in:

    project_root
    └── tests
        ├── test_something.py
        │   └── def test_something_success()
        └── coral_data_stubs
            └── test_something
                └── test_something_success
                    ├── stub_file_1
                    └── stub_file_2
    ```

    """
    if coral_data_stub_markers:
        module = request.node.path.parent
        test_file_name = request.node.path.stem
        stub_folder = (
            module / "coral_data_stubs" / test_file_name / _get_stub_folder_name(request.cls, request.node.name)
        )

        stub_folder.mkdir(exist_ok=True, parents=True)
        monkeypatch.setattr(local_cache, "CACHE_DIR", str(stub_folder))
        monkeypatch.setattr(local_cache.CORAL_DATA_CONFIG, "local_cache", True)
        monkeypatch.setattr(local_cache.CORAL_DATA_CONFIG, "cache_ttl_seconds", _CACHE_TTL)
        monkeypatch.setattr(
            _PlexosFolderProcessor, "_model_year_file", model_year_file_wrapper(_PlexosFolderProcessor._model_year_file)
        )
        yield
    else:
        yield None
